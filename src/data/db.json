{
  "posts": [
    {
      "createdAt": 1621139532415,
      "title": "Reactを使ったテックブログを作成してみた",
      "body": "## はじめに\n\nReactを学習していくにあたり、REST APIを用いたCRUD操作の勉強のため技術ブログを作成してみました。\n\nhttps://github.com/himorishige/techBlog\n\n今回は簡易的に利用できるJSON Serverを使ってデータのやり取りを行い、Redux Toolkitを追加状態の管理を行っています。\n今後は外部サイトに公開できるように外部のデータベースと連携していきたいところです。\n\n## 仕様について\n\n今回は下記のような仕様を想定して制作を行いました。\n\n- 閲覧ユーザー向けの機能\n  - 記事一覧を表示する（公開設定している記事のみ）\n  - 記事詳細を表示する\n  - いいねボタンを押すといいねが1増える（何度も押せる）\n- 管理ユーザー向けの機能\n  - 登録記事一覧を表示する\n  - 記事詳細を表示する\n  - 記事の編集ができる\n  - 記事の公開・非公開の切り替えができる\n  - 記事の削除ができる\n  - 新規記事の作成ができる\n  - 記事はマークダウン記法で登録できる\n  - ログイン機能はなし\n  - 画像の投稿機能はなし\n\n## 主な利用サービス・利用技術\n\n- React\n- Redux Toolkit\n- JSON Server … JSONファイルをデータベースとして利用できる簡易APIサーバー\n- react-markdown … Reactで使えるマークダウン変換ライブラリ\n- styled-components\n- TypeScript\n\n## JSON Server\n\n今回外部APIとしてJSON Serverを利用しました。\nデータベースとしてJSONファイルをそのまま利用することができるので、余計な手間をかけずにすぐに開発に取り掛かることができます。JSON形式のデータを返すAPIであれば、JSON Serverで作成後にURLだけ変えれば外部との連携に簡単に切り替えることもできます。\n\n### セットアップ\n\n```bash\n$ yarn add json-server\n```\n\nデータベースとして利用するJSONファイルを用意します。\nフォーマットとしてはリソース名を1階層目に必ず用意しなくてはいけません。\n今回はブログサイトを想定していますので下記のようなダミーデータを用意しました。\n\n```json:src/data/db.json\n{\n  \"posts\": [\n    {\n      \"id\": \"1\",\n      \"title\": \"create-react-app直後にやる環境構築の備忘録\",\n      \"createdAt\": 1620804168398,\n      \"updatedAt\": 1621064460898,\n      \"body\": \"本文テキスト1\",\n      \"image\": \"/assets/images/dummy01.jpeg\",\n      \"like\": 100,\n      \"publish\": false\n    },\n    {\n      \"id\": \"2\",\n      \"title\": \"Reactを使ったお天気アプリを作成してみた\",\n      \"createdAt\": 1620804168398,\n      \"updatedAt\": 1621070951011,\n      \"body\": \"本文テキスト2\",\n      \"image\": \"/assets/images/dummy01.jpeg\",\n      \"like\": 112,\n      \"publish\": true\n    }\n  ]\n}\n```\n\nReact内で扱う型としては下記を想定しています。\n投稿「Post」とその一覧「Post[]」という形です。\n\n```typescript:src/types/index.ts\nexport type Post = {\n  id: string;\n  createdAt: number;\n  updatedAt?: number;\n  title: string;\n  body: string;\n  image: string;\n  like: number;\n  publish: boolean;\n};\n\nexport type Posts = Post[];\n```\n\npackage.jsonにJSON Server起動用のスクリプトを追記します。\n\n```json:package.json\n  \"scripts\": {\n    \"json-server\": \"json-server --watch src/data/db.json -p 3001 -d 2000\"\n  },\n```\n\n**--watch**をつけることで常時監視モードで起動することができます。\nReactがポート3000を利用するため、**-p 3001**として3001番ポートで起動するように変更。\nまた、**-d 2000**として2秒の待ち時間を入れるようにしています。待ち時間を入れることで非同期のテストも体感的にわかりやすくなのでとても便利です。\n\n```bash\n$ yarn json-server\n```\n\nブラウザで **http://localhost:3001/posts** を開くと登録した記事一覧を表示することができます。\n\n## JSON ServerへのCRUD操作\n\n今回は記事の登録、編集、削除に合わせてRedux ToolkitのcreateAsyncThunk、axiosを利用してJSON Serverへアクセスしました。\n\n```typescript\nconst post:Post = 記事データ\n\n// 登録 POST\nconst response = await axios\n  .post<Post>(`${URL}/posts`, post)\n  .catch((err) => {\n    // エラー処理\n  });\nreturn response.data;\n\n// 編集 PUT\nconst response = await axios\n  .put<Post>(`${URL}/posts/${post.id}`, post)\n  .catch((err) => {\n    // エラー処理\n  });\nreturn response.data;\n\n// 削除 DELETE\nconst response = await axios\n  .delete<Post>(`${URL}/posts/${post.id}`, {\n    data: { id: post.id },\n  })\n  .catch((err) => {\n    // エラー処理\n  });\nreturn response.data;\n```\n\n上記は省略していますが前後の処理については下記ソースを参照いただければと思います。\n\nhttps://github.com/himorishige/techBlog/blob/main/src/features/posts/postsEntitySlice.ts\n\n## Redux Toolkit\n\nJSON Serverからデータの取得にはcreateAsyncThunkを経由して、createEntityAdapterを使い処理を行っています。\n詳細は下記にも記事を投稿させていただきました。\n\nqiita記事リンク\n\n## 苦労した点\n\nReact Routerで複数のページを扱いながら、その中でできる限りムダな通信や処理は行わないように考えることに時間をかなり要してしまいました。ただ今回は制限などがある外部のAPIではなくローカル環境で構築ができたので制限にびくびくする必要なく精神衛生上よかったように思います。\nまた非同期の処理については相変わらず怪しい知識のままなのですが、今回はRedux ToolkitのcreateAsyncThunkを利用することで比較的簡単に処理を分岐できたのが大きな発見でした。\n\n## 今後の拡張\n\n今後の拡張としては今の所下記を想定したいところです。。。\n\n- 管理画面の認証機能\n- 画像の投稿機能\n- Express、mongoDBを用いたバックエンド構築\n\n# さいごに\n\nチュートリアル的なTODOアプリからちょっと進んだ？、APIを用いたCRUDなアプリケーションを作成することでより知識を深めることができました。JSON Serverで気軽にバックエンドを構築できてたのもあり、制作期間も1週間程度とかなり短期間ですすめることができたのも大きな一歩です。\nテックブログもすこしずつ拡張しながらさらに知識を深めていこうと思います。\n\n# 関連記事\n\nReduxの記事\n\n# 参考サイト\n\nReact\n\nhttps://github.com/reduxjs/cra-template-redux-typescript\n\nJSON Server\n\nhttps://github.com/typicode/json-server\n\nhttps://www.codegrid.net/articles/2017-json-server-1/\n\nRedux\n\nhttps://www.youtube.com/watch?v=Lmtr8hmXvj4&list=PLtbitg0evatjxN_BhyJO124bV2eDoJumf\n\nhttps://www.youtube.com/watch?v=yQz2gSQiOZA&list=PLtbitg0evatg24WZm9Q8wTIP-We2V0OpZ\n\nhttps://www.cyokodog.net/blog/redux-toolkit-async-thunk/\n\nhttps://redux-toolkit.js.org/api/createAsyncThunk\n\nhttps://redux-toolkit.js.org/api/createEntityAdapter\n\n",
      "image": "/assets/images/dummy01.jpeg",
      "like": 2,
      "publish": true,
      "id": 1
    }
  ]
}